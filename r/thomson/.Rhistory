TSS <- crossprod(y-ybar)
ESS <- crossprod(x %*% b_hat - ybar)
USS = TSS-ESS
R.squared <- ESS/TSS
adj.R.squared <- 1-(1-R.squared)*(n-1)/(n-k)
F.stat <- (ESS/(k-1))/(USS/(n-k))
pF <- 1-pf(F.stat,k-1,n-k)
cat("  Parameter estimates =", round(b_hat,2),fill=TRUE)
cat("  Standard errors     =", round(std.estimates,2),fill=TRUE)
cat("  t-stats             =", round(t.stat,2),fill=TRUE)
cat("  p-value             =", round(p.value,2),fill=TRUE)
cat("\n",fill=TRUE)
cat("Residual standard error:",round(sqrt(sigsq.hat),2),"on",n-k,"degrees of freedom",fill=TRUE)
cat("Multiple R-squared",round(R.squared,3),"     Adjusted R-squared",round(adj.R.squared,3),fill=TRUE)
cat("F-statistic:", round(F.stat,3), "on",k-1,"and",n-k," DF,  Pvalue:",round(pF,3),fill=TRUE)
list(b_hat = b_hat, std.estimates = std.estimates, t.stat = t.stat
,p.value = p.value, sigsq.hat = sigsq.hat, R.squared = R.squared
,adj.R.squared = adj.R.squared, F.stat = F.stat)
}
data <- DGP.2(0,0)
OLS.est(data)
OLS.est <- function(data, include.constant=TRUE){
y <- data$y
n <- length(y)
if(include.constant == TRUE){
k <- ncol(data$x)+1
x0 <- rep(1, times=n)
x <- cbind(x0,data$x)
}
else{
k <- ncol(data$x)
x <- data$x
}
chol <- chol2inv(chol(crossprod(x)))
b_hat <-chol %*% crossprod(x,y) #b=(X'X)^-1XY
res <- y - x %*% b_hat
sigsq.hat <- crossprod(res)/(n-k) #S^2 계산
sigsq.hat <- as.numeric(sigsq.hat)
varmatrix <- sigsq_hat*chol
std.estimates <- matrix(data=NA,nrow=k,ncol=1) #sigma를 구하자
for(i in 1:k){
std.estimates[i,1]=sqrt(varmatrix[i,i])
}
t.stat <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
t.stat[i,1]=b_hat[i,1]/std.estimates[i,1]
}
p.value <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
p.value[i,1]=2*(1-pt(abs(t.stat[i,1]),df=n-k))
}
ybar <- rep(mean(y),n)         #R^2과 F-test를 위한 준비
TSS <- crossprod(y-ybar)
ESS <- crossprod(x %*% b_hat - ybar)
USS = TSS-ESS
R.squared <- ESS/TSS
adj.R.squared <- 1-(1-R.squared)*(n-1)/(n-k)
F.stat <- (ESS/(k-1))/(USS/(n-k))
pF <- 1-pf(F.stat,k-1,n-k)
cat("  Parameter estimates =", round(b_hat,2),fill=TRUE)
cat("  Standard errors     =", round(std.estimates,2),fill=TRUE)
cat("  t-stats             =", round(t.stat,2),fill=TRUE)
cat("  p-value             =", round(p.value,2),fill=TRUE)
cat("\n",fill=TRUE)
cat("Residual standard error:",round(sqrt(sigsq.hat),2),"on",n-k,"degrees of freedom",fill=TRUE)
cat("Multiple R-squared",round(R.squared,3),"     Adjusted R-squared",round(adj.R.squared,3),fill=TRUE)
cat("F-statistic:", round(F.stat,3), "on",k-1,"and",n-k," DF,  Pvalue:",round(pF,3),fill=TRUE)
list(b_hat = b_hat, std.estimates = std.estimates, t.stat = t.stat
,p.value = p.value, sigsq.hat = sigsq.hat, R.squared = R.squared
,adj.R.squared = adj.R.squared, F.stat = F.stat)
}
data <- DGP.2(0,0)
OLS.est(data
OLS.est(data)
OLS.est(data)
OLS.est <- function(data, include.constant=TRUE){
y <- data$y
n <- length(y)
if(include.constant == TRUE){
k <- ncol(data$x)+1
x0 <- rep(1, times=n)
x <- cbind(x0,data$x)
}
else{
k <- ncol(data$x)
x <- data$x
}
chol <- chol2inv(chol(crossprod(x)))
b_hat <-chol %*% crossprod(x,y) #b=(X'X)^-1XY
res <- y - x %*% b_hat
sigsq.hat <- crossprod(res)/(n-k) #S^2 계산
sigsq.hat <- as.numeric(sigsq.hat)
varmatrix <- sigsq.hat*chol
std.estimates <- matrix(data=NA,nrow=k,ncol=1) #sigma를 구하자
for(i in 1:k){
std.estimates[i,1]=sqrt(varmatrix[i,i])
}
t.stat <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
t.stat[i,1]=b_hat[i,1]/std.estimates[i,1]
}
p.value <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
p.value[i,1]=2*(1-pt(abs(t.stat[i,1]),df=n-k))
}
ybar <- rep(mean(y),n)         #R^2과 F-test를 위한 준비
TSS <- crossprod(y-ybar)
ESS <- crossprod(x %*% b_hat - ybar)
USS = TSS-ESS
R.squared <- ESS/TSS
adj.R.squared <- 1-(1-R.squared)*(n-1)/(n-k)
F.stat <- (ESS/(k-1))/(USS/(n-k))
pF <- 1-pf(F.stat,k-1,n-k)
cat("  Parameter estimates =", round(b_hat,2),fill=TRUE)
cat("  Standard errors     =", round(std.estimates,2),fill=TRUE)
cat("  t-stats             =", round(t.stat,2),fill=TRUE)
cat("  p-value             =", round(p.value,2),fill=TRUE)
cat("\n",fill=TRUE)
cat("Residual standard error:",round(sqrt(sigsq.hat),2),"on",n-k,"degrees of freedom",fill=TRUE)
cat("Multiple R-squared",round(R.squared,3),"     Adjusted R-squared",round(adj.R.squared,3),fill=TRUE)
cat("F-statistic:", round(F.stat,3), "on",k-1,"and",n-k," DF,  Pvalue:",round(pF,3),fill=TRUE)
list(b_hat = b_hat, std.estimates = std.estimates, t.stat = t.stat
,p.value = p.value, sigsq.hat = sigsq.hat, R.squared = R.squared
,adj.R.squared = adj.R.squared, F.stat = F.stat)
}
data <- DGP.2(0,0)
OLS.est(data)
out <-lm(data$y~data$x[,1]+data$x[,2])
summary(out)
var(data$x)
out <-lm(data$y~data$x[,1]+data$x[,2])
summary(out)
help("lm")
?lm
?formula
out <-lm(data$y~0+data$x[,1]+data$x[,2])
summary(out)
out <-lm(data$y~data$x[,1]+data$x[,2])
summary(out)
data <- read.csv("C:/Users/dwchoi/Desktop/Part1.csv",header=)
data
cor(data)
data
cor(data)
data[,1] <- null
data
cor(data)
data[,1] == null
rm(list=ls())
data <- read.csv("C:/Users/dwchoi/Desktop/Part1.csv",header=)
attach(data)
data
cor(data)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP+PROMOTION)
summary(out)
cor(data)
out<-lm(REVENUE~COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+POP+PROMOTION)
summary(out)
cor(data)
out<-lm(REVENUE~AREA+COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(REVENUE~COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(0+REVENUE~AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE)
summary(out)
21.109*300-481.158*4+551.671*8
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE)
summary(out)
data <- read.csv("E:/prod.csv",header=)
data <- read.csv("E:/prod.csv",header=)
View(data)
data <- read.csv("E:/prod.csv",header=False)
data <- read.csv("E:/prod.csv",header=F)
View(data)
data <- read.csv("E:/purchase.csv",header=F)
data <- read.csv("E:/purchase.csv",header=F)
data <- read.csv("E:/customer.csv",header=F)
install.packages("swirl")
library(swirl)
swril()
swirl()
data <- read.csv("J:데이터\\thompson_clean_after1990")
data <- read.csv("J:\\데이터\\thompson_clean_after1990")
data <- read.csv("J:\\데이터\\thompson_clean_after1990.csv")
data <- read.csv("J:\\데이터\\thompson_clean_after1990.csv")
View(data)
fb <- sqldf("select * from data where Company.name contain 'facebook'")
library(sqldf)
fb <- sqldf("select * from data where Company.name contain 'facebook'")
names(data)
str(data[152])
fb <- sqldf("select * from data where Company.Name contain 'facebook'")
fb <- sqldf("select * from data where Company.Name contains 'facebook'")
fb <- sqldf("select * from data where contains(Company.Name, 'facebook'")
fb <- sqldf("select * from data where contains(Company.Name, 'facebook'"))
fb <- sqldf("select * from data where contains(Company.Name, 'facebook')")
fb <- sqldf("select * from data where contains(data[30],'facebook')")
source('C:/Users/DW/Dropbox/공부할거/코딩/mycode/r/thomson/d.R', echo=TRUE)
fb <- sqldf("select * from data where contains(Company.Name,'facebook')")
fb <- sqldf("select * from data where contains(Company.Name ,'facebook')")
names <- sqldf("select * from ALL_COL_COMMENTS where TABLE_NAME = 'data'")
names <- sqldf("select * from data.COLUMNS")
names <- sqldf("select * from information_schema.COLUMNS")
fb <- sqldf("select Company.Name from data)
fb <- sqldf("select Company.Name from data)
fb <- sqldf("select Company.Name from data")
fb <- sqldf("select * from data limit 1")
View(fb)
View(data)
View(fb)
View(data)
View(fb)
f<- sqldf("select column_name from information_schema.columns where table_name='data'")
colnames(data) <- gsub("\\.","_",colnames(data))
fb <- sqldf("select * from data limit 1")
View(fb)
fb <- sqldf("select * from data where contains(Company_Name, 'facebook')")
fb <- sqldf("select * from data where Company_Name like 'facebook')
fb <- sqldf("select * from data where Company_Name like 'facebook')
fb <- sqldf("select * from data where Company_Name like 'facebook'")
View(fb)
fb <- sqldf("select * from data where Company_Name like 'facebook%'")
View(fb)
names(data)
data <- subset(data, select = -Fund_Fax_Number)
colnames(data) <- gsub("__","_",colnames(data))
View(data)
colnames(data) <- gsub("%_","_",colnames(data))
colnames(data) <- gsub("%%_",".",colnames(data))
colnames(data) <- gsub("\\_",".",colnames(data))
colnames(data) <- gsub("\\.","",colnames(data))
data <- read.csv("J:\\데이터\\thompson_clean_after1990.csv")
data <- subset(data, select = -Fund_Fax_Number)
data <- subset(data, select = -Fund.Fax.Number)
colnames(data) <- gsub("\\.","_",colnames(data))
write.csv(clean2, "J:\\데이터\\thompson_clean2.csv")
write.csv(data, "J:\\데이터\\thompson_clean2.csv")
data <- read.csv("J:\\데이터\\thompson_clean2.csv")
View(data)
data <- subset(data, select = -Fund_Fax_Number)
data <- subset(data, select = -Fund_Fax_Number_)
names(data)
a<-colnames(data)
a<-colnames(data)
a
help('gsub')
a <- gsub("__", "_", fixed=TRUE)
a <- gsub("__","_",a,fixed=TRUE)
a
a <- sub("__", "_", a, fixed=TRUE)
a
a <- gsub("\\_$", "", a)
a
a<-colnames(data)
a <- sub("__", "_", a, fixed=TRUE)
a
a <- gsub("_$", "", a, fixed=TRUE)
a
a <- gsub("\\_$", "", a, fixed=TRUE)
a
a <- gsub("\\_$", "", a)
a
colnames(data) <- gsub("\\.","_",colnames(data)) #colname의 .을 _로 변경
colnames(data)("__", "_", a, fixed=TRUE)        #__를 _로 변경
colnames(data)("\\_$", "", a)
colnames(data)("__", "_", colnames(data), fixed=TRUE)        #__를 _로 변경
colnames(data)("\\_$", "", colnames(data))
colnames(data)("__", "_", colnames(data), fixed=TRUE)
colnames(data) <- sub("__", "_", colnames(data), fixed=TRUE)        #__를 _로 변경
colnames(data) <- gsub("\\_$", "", colnames(data))
View(data)
names(data)
write.csv(data, "J:\\데이터\\thompson_clean2.csv")
library(dplyr)
library(sqldf)
data <- read.csv("J:\\데이터\\thompson_clean_after1990.csv")
fb <- sqldf("select * from data where Company_Name like 'facebook%'")
names(data)
View(data)
data <- read.csv("J:\\데이터\\thompson_clean2.csv")
names(data)
fb <- sqldf("select * from data where Company_Name like 'facebook%'")
View(fb)
write.csv(data, "J:\\데이터\\facebook.csv")
library(dplyr)
library(sqldf)
data <- read.csv("J:\\데이터\\thompson_clean2.csv")
fb <- sqldf("select * from data where Company_Name like 'facebook%'")
write.csv(fb, "J:\\데이터\\facebook.csv")
library(dplyr)
library(sqldf)
data <- read.csv("J:\\데이터\\thompson_clean2.csv")
ata <- subset(data, select = -Company_City_Branch_Office)
data <- subset(data, select = -Company_Business_Description_Short)
data <- subset(data, select = -Firm_Founded_Year__Real_Estate)
data <- subset(data, select = -Firm_Congressional_District)
data <- subset(data, select = -Firm_Founded_Date)
data <- subset(data, select = -Firm_Website)
data <- subset(data, select = -c(Fund_Congressional_District, Fund_Founded_Date))
data <- subset(data, select = -c(Firm_State__Region,Company__Real_Estate, Company_Banking_Relationships,
Company_Alias_es, Company_Congressional_District, Company_MSA, Company_Metropolitan_Location,
Company_North_American_Location, Company_State__Region,Company_State__Region__Branch_Office,
Company_World_Location, Company_World_Location_Branch_Office, Company_World_Sub_Location,
Company_World_Sub_Location_Branch_Office, Cumulative_Dividends, Firm_Affiliations, Firm_Area_Code))
data <- subset(data, select = -c(Firm_MSA, Firm_Latest_Fund_Year, Firm_Metropolitan_Location, Firm_North_American_Location,
Firm_World_Location, Firm_World_Sub_Location, First_Investment_Received_Date,
Fund_Area_Code, Fund_County, Fund_MSA, Fund_Metropolitan_Location, Fund_MoneyTree_Region))
data <- subset(data, select = -c(Fund_North_American_Location, Fund_Sequence, Fund_State__Region,
Fund_World_Location, Fund_World_Sub_Location, Investment_Location__City,
Investment_Location__Nation, Investment_Location__State, Investment_Location__World_Location,
Investment_Location__Zip_Code, Liquidation_Preference, Last_Investment_Received_Date,
Multiple_of_the_Liquidation_Preference, Pay_to_Play_Penalties, Portfolio_Status, Real_Estate_Sector,
Redemption_at_Investor_s_Option, Reorganization_or_Recapitalization))
data <- subset(data, select = -Company_City_Branch_Office)
data <- subset(data, select = -Company_Business_Description_Short)
data <- subset(data, select = -Firm_Founded_Year__Real_Estate)
data <- subset(data, select = -Firm_Congressional_District)
data <- subset(data, select = -Firm_Founded_Date)
data <- subset(data, select = -Firm_Website)
data <- subset(data, select = -c(Fund_Congressional_District, Fund_Founded_Date))
data <- subset(data, select = -c(Firm_State__Region,Company__Real_Estate, Company_Banking_Relationships,
Company_Alias_es, Company_Congressional_District, Company_MSA, Company_Metropolitan_Location,
Company_North_American_Location, Company_State__Region,Company_State__Region__Branch_Office,
Company_World_Location, Company_World_Location_Branch_Office, Company_World_Sub_Location,
Company_World_Sub_Location_Branch_Office, Cumulative_Dividends, Firm_Affiliations, Firm_Area_Code))
data <- subset(data, select = -c(Firm_MSA, Firm_Latest_Fund_Year, Firm_Metropolitan_Location, Firm_North_American_Location,
Firm_World_Location, Firm_World_Sub_Location, First_Investment_Received_Date,
Fund_Area_Code, Fund_County, Fund_MSA, Fund_Metropolitan_Location, Fund_MoneyTree_Region))
data <- subset(data, select = -c(Fund_North_American_Location, Fund_Sequence, Fund_State__Region,
Fund_World_Location, Fund_World_Sub_Location, Investment_Location__City,
Investment_Location__Nation, Investment_Location__State, Investment_Location__World_Location,
Investment_Location__Zip_Code, Liquidation_Preference, Last_Investment_Received_Date,
Multiple_of_the_Liquidation_Preference, Pay_to_Play_Penalties, Portfolio_Status, Real_Estate_Sector,
Redemption_at_Investor_s_Option, Reorganization_or_Recapitalization))
View(ata)
write.csv(data, "J:\\데이터\\thompson_clean3.csv", row.names=FALSE)
data <- subset(data, select = -c(X.2, X.1, X_1, X_1.1, X, Capped_Participating_Preferred,
Company_Accountant, Company_Area_Code, Company_Legal_Counsel, Company_MoneyTree_Region,
Company_Number_of_Employees, Company_Zip_Code, Company_Zip_Code_Branch_Office, Deal_Value_USD_Mil,
Debt_Amount_USD_Mil, Firm__First_Investment_Date, Firm__Last_Investment_Date, Firm__Total_Number_of_Deals,
Firm_Latest_Fund_Closing_Date, Firm_Latest_Fund_Name, Firm_Latest_Fund_Size_USD_Mil, Firm_MoneyTree_Region,
Firm_Nation, Firm_Preferred_Investment_Role, Firm_Preferred_Maximum_Investment_USD_Mil,
Firm_Preferred_Minimum_Investment_USD_Mil))
data <- subset(data, select = -c(Firm_Industry_Focus, Firm_Status, Firm_Zip_Code, Fund__First_Investment_Date,
Fund__Last_Investment_Date, Fund__Total_Number_of_Deals, Fund_City, Fund_Founded_Year,
Fund_Industry_Focus, Fund_Investor_Type, Fund_Nation, Fund_Size_USD_Mil, Fund_Size_Category_USD_Mil,
Fund_Size_Target_USD_Mil, Fund_Stage, Fund_Status, Fund_Type, Fund_Zip_Code, Investment_Date_1,
Investment_Location__World_Sub_Location))
data <- subset(data, select = -c(MoneyTree_Industry, NAIC_Code, NAIC_Description, New_or_Follow_on_Investment, No_of_Firms_in_Total,
No_of_Funds_Managed_by_Firm, No_of_Funds_at_Investment_Date, No_of_Funds_in_Total,
Total_Estimated_Equity_Invested_by_Firm_to_Date_USD_Mil, Total_Estimated_Equity_Invested_by_Fund_to_Date_USD_Mil,
Total_Known_Equity_Invested_by_Firm_to_Date_USD_Mil, Total_Known_Equity_Invested_by_Fund_to_Date_USD_Mil, Total_Number_of_Companies_Invested_in_by_Firm,
Total_Number_of_Companies_Invested_in_by_Fund, Type_of_Preferred_Stock, Valuation_Direction))
View(data)
data <- subset(data, select = -c(X.2, X.1, X_1, X_1.1, X, Capped_Participating_Preferred,
Company_Accountant, Company_Area_Code, Company_Legal_Counsel, Company_MoneyTree_Region,
Company_Number_of_Employees, Company_Zip_Code, Company_Zip_Code_Branch_Office, Deal_Value_USD_Mil,
Debt_Amount_USD_Mil, Firm__First_Investment_Date, Firm__Last_Investment_Date, Firm__Total_Number_of_Deals,
Firm_Latest_Fund_Closing_Date, Firm_Latest_Fund_Name, Firm_Latest_Fund_Size_USD_Mil, Firm_MoneyTree_Region,
Firm_Nation, Firm_Preferred_Investment_Role, Firm_Preferred_Maximum_Investment_USD_Mil,
Firm_Preferred_Minimum_Investment_USD_Mil))
data <- subset(data, select = -c(Firm_Industry_Focus, Firm_Status, Firm_Zip_Code, Fund__First_Investment_Date,
Fund__Last_Investment_Date, Fund__Total_Number_of_Deals, Fund_City, Fund_Founded_Year,
Fund_Industry_Focus, Fund_Investor_Type, Fund_Nation, Fund_Size_USD_Mil, Fund_Size_Category_USD_Mil,
Fund_Size_Target_USD_Mil, Fund_Stage, Fund_Status, Fund_Type, Fund_Zip_Code, Investment_Date_1,
Investment_Location__World_Sub_Location))
data <- subset(data, select = -c(MoneyTree_Industry, NAIC_Code, NAIC_Description, New_or_Follow_on_Investment, No_of_Firms_in_Total,
No_of_Funds_Managed_by_Firm, No_of_Funds_at_Investment_Date, No_of_Funds_in_Total,
Total_Estimated_Equity_Invested_by_Firm_to_Date_USD_Mil, Total_Estimated_Equity_Invested_by_Fund_to_Date_USD_Mil,
Total_Known_Equity_Invested_by_Firm_to_Date_USD_Mil, Total_Known_Equity_Invested_by_Fund_to_Date_USD_Mil, Total_Number_of_Companies_Invested_in_by_Firm,
Total_Number_of_Companies_Invested_in_by_Fund, Type_of_Preferred_Stock, Valuation_Direction))
View(data)
data <- read.csv("J:\\데이터\\thompson_clean3.csv")
View(data)
ata <- subset(data, select = -c(X.1, X_1, X_1.1, X, Capped_Participating_Preferred,
Company_Accountant, Company_Area_Code, Company_Legal_Counsel, Company_MoneyTree_Region,
Company_Number_of_Employees, Company_Zip_Code, Company_Zip_Code_Branch_Office, Deal_Value_USD_Mil,
Debt_Amount_USD_Mil, Firm__First_Investment_Date, Firm__Last_Investment_Date, Firm__Total_Number_of_Deals,
Firm_Latest_Fund_Closing_Date, Firm_Latest_Fund_Name, Firm_Latest_Fund_Size_USD_Mil, Firm_MoneyTree_Region,
Firm_Nation, Firm_Preferred_Investment_Role, Firm_Preferred_Maximum_Investment_USD_Mil,
Firm_Preferred_Minimum_Investment_USD_Mil))
data <- subset(data, select = -c(Firm_Industry_Focus, Firm_Status, Firm_Zip_Code, Fund__First_Investment_Date,
Fund__Last_Investment_Date, Fund__Total_Number_of_Deals, Fund_City, Fund_Founded_Year,
Fund_Industry_Focus, Fund_Investor_Type, Fund_Nation, Fund_Size_USD_Mil, Fund_Size_Category_USD_Mil,
Fund_Size_Target_USD_Mil, Fund_Stage, Fund_Status, Fund_Type, Fund_Zip_Code, Investment_Date_1,
Investment_Location__World_Sub_Location))
data <- subset(data, select = -c(MoneyTree_Industry, NAIC_Code, NAIC_Description, New_or_Follow_on_Investment, No_of_Firms_in_Total,
No_of_Funds_Managed_by_Firm, No_of_Funds_at_Investment_Date, No_of_Funds_in_Total,
Total_Estimated_Equity_Invested_by_Firm_to_Date_USD_Mil, Total_Estimated_Equity_Invested_by_Fund_to_Date_USD_Mil,
Total_Known_Equity_Invested_by_Firm_to_Date_USD_Mil, Total_Known_Equity_Invested_by_Fund_to_Date_USD_Mil, Total_Number_of_Companies_Invested_in_by_Firm,
Total_Number_of_Companies_Invested_in_by_Fund, Type_of_Preferred_Stock, Valuation_Direction))
data <- subset(data, select = -c(X.1, X_1, X_1.1, X, Capped_Participating_Preferred,
Company_Accountant, Company_Area_Code, Company_Legal_Counsel, Company_MoneyTree_Region,
Company_Number_of_Employees, Company_Zip_Code, Company_Zip_Code_Branch_Office, Deal_Value_USD_Mil,
Debt_Amount_USD_Mil, Firm__First_Investment_Date, Firm__Last_Investment_Date, Firm__Total_Number_of_Deals,
Firm_Latest_Fund_Closing_Date, Firm_Latest_Fund_Name, Firm_Latest_Fund_Size_USD_Mil, Firm_MoneyTree_Region,
Firm_Nation, Firm_Preferred_Investment_Role, Firm_Preferred_Maximum_Investment_USD_Mil,
Firm_Preferred_Minimum_Investment_USD_Mil))
data <- subset(data, select = -c(Firm_Industry_Focus, Firm_Status, Firm_Zip_Code, Fund__First_Investment_Date,
Fund__Last_Investment_Date, Fund__Total_Number_of_Deals, Fund_City, Fund_Founded_Year,
Fund_Industry_Focus, Fund_Investor_Type, Fund_Nation, Fund_Size_USD_Mil, Fund_Size_Category_USD_Mil,
Fund_Size_Target_USD_Mil, Fund_Stage, Fund_Status, Fund_Type, Fund_Zip_Code, Investment_Date_1,
Investment_Location__World_Sub_Location))
data <- subset(data, select = -c(MoneyTree_Industry, NAIC_Code, NAIC_Description, New_or_Follow_on_Investment, No_of_Firms_in_Total,
No_of_Funds_Managed_by_Firm, No_of_Funds_at_Investment_Date, No_of_Funds_in_Total,
Total_Estimated_Equity_Invested_by_Firm_to_Date_USD_Mil, Total_Estimated_Equity_Invested_by_Fund_to_Date_USD_Mil,
Total_Known_Equity_Invested_by_Firm_to_Date_USD_Mil, Total_Known_Equity_Invested_by_Fund_to_Date_USD_Mil, Total_Number_of_Companies_Invested_in_by_Firm,
Total_Number_of_Companies_Invested_in_by_Fund, Type_of_Preferred_Stock, Valuation_Direction))
remove(ata)
write.csv(data, "J:\\데이터\\thompson_clean4.csv", row.names=FALSE)
IT <- sqldf("select * from data where Company_VE_Primary_Industry_Class like 'Information%'")
IT <- subset(IT, Company_Technology_Application!='Non-Internet Related')
# cleantech, nanotech 뭔지 거슬린다 확인 ㄱㄱ
Cleanano <- subset(IT, Company_Technology_Application=='Clean Technology' | Company_Technology_Application=='Nanotechnology')
arng.clna<-arrange(Cleanano, Company_Technology_Application, Company_VE_Primary_Industry_Sub_Group_3)
# Cleanano 전부 다 인터넷이랑 상관이 없네 그럼 제거
IT2 <- subset(IT, Company_Technology_Application!='Clean Technology' & Company_Technology_Application!='Nanotechnology')
# B2B 회사는 안 맞아서 제거
IT3 <- subset(IT2, Company_Primary_Customer_Type!='Business' & Company_Technology_Application!='Business Process Outsourcing (BPO)')
# 이제 뭐 있나 보자
unique(IT3[22])
# 인터넷 달린거랑 e-commerce만 추려내야지
IT4 <- sqldf("select * from IT3 where Company_VE_Primary_Industry_Sub_Group_1 like 'Internet%'")
### 하고 봤더니 IT3[21]에 internet specific만 골라 놓은거네... 진작 이걸로 할걸
# IPO 한 놈들만 골라보자
IT.ipo <- subset(IT4, IT4[9]!='-')
count(unique(IT.ipo[13]))   # ipo 회사 몇 개니 - 344개
write.csv(IT4, "J:\\데이터\\internet_with_sic.csv",row.names=FALSE)
write.csv(IT.ipo, "J:\\데이터\\internet_ipo_with_sic.csv",row.names=FALSE)
data <- read.csv("J:\\데이터\\internet_ipo_with_sic.csv")
US <- sqldf("select * from data where Company_Nation=='United States'")  #미국만 좀 골라보자
US_company = distinct(US, Company_Name)
US_company <- arrange(US_company, Company_Name)
US_BM = distinct(US, Company_VE_Primary_Industry_Sub_Group_3)
US_BM <- arrange(US_BM, Company_VE_Primary_Industry_Sub_Group_3)
write.csv(US, "J:\\데이터\\US_internet_ipo_with_sic.csv",row.names=FALSE)
data<- read.csv("J:\\데이터\\US_internet_ipo_with_sic.csv")
data <- read.csv("J:\\데이터\\thompson_clean4.csv")
IT <- sqldf("select * from data where Company_VE_Primary_Industry_Class like 'Information%'")
IT <- subset(IT, Company_Technology_Application!='Non-Internet Related')
IT2 <- subset(IT, Company_Technology_Application!='Clean Technology' & Company_Technology_Application!='Nanotechnology')
IT3 <- subset(IT2, Company_Primary_Customer_Type!='Business' & Company_Technology_Application!='Business Process Outsourcing (BPO)')
IT4 <- sqldf("select * from IT3 where Company_VE_Primary_Industry_Sub_Group_1 like 'Internet%'")
naems(IT4[9])
names(IT4)
IT.ipo <- subset(IT4, IT4[11]!='-')
count(unique(IT.ipo[15]))   # ipo 회사 몇 개니 - 344개
write.csv(IT4, "J:\\데이터\\internet_with_sic.csv",row.names=FALSE)
write.csv(IT.ipo, "J:\\데이터\\internet_ipo_with_sic.csv",row.names=FALSE)
names(IT[2])
names(IT2)
IT_ipo <- subset(IT2, IT2[11]!='-')
US.IT <- sqldf("select * from IT_ipo where Company_Nation=='United States'")  #誘멸뎅留? 醫 怨⑤씪蹂댁옄
count(unique(US.IT[15]))   # 誘멸뎅, IT, IPO 830媛?
data <- read.csv("J:\\데이터\\thompson_clean4.csv")
IT <- sqldf("select * from data where Company_VE_Primary_Industry_Class like 'Information%'")
IT2 <- subset(IT, Company_Technology_Application!='Clean Technology' & Company_Technology_Application!='Nanotechnology')
IT_ipo <- subset(IT2, IT2[11]!='-')
US.IT <- sqldf("select * from IT_ipo where Company_Nation=='United States'")  #誘멸뎅留? 醫 怨⑤씪蹂댁옄
count(unique(US.IT[15]))   # 誘멸뎅, IT, IPO 830媛?
US_BM = distinct(US.IT, Company_VE_Primary_Industry_Sub_Group_3)
View(US_BM)
write.csv(US.IT, "J:\\?뜲?씠?꽣\\US_IT_ipo_with_sic.csv",row.names=FALSE)
US_BM = distinct(US.IT, Company_VE_Primary_Industry_Sub_Group_3)
write.csv(US.IT, "J:\\데이터\\US_IT_ipo_with_sic.csv",row.names=FALSE)
count(unique(US.IT[15]))   # IT, IPO 한 기업들 830개
