t.stat <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
t.stat[i,1]=b_hat[i,1]/std.estimates[i,1]
}
p.value <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
p.value[i,1]=2*(1-pt(abs(t.stat[i,1]),df=n-k))
}
ybar <- rep(mean(y),n)         #R^2과 F-test를 위한 준비
TSS <- crossprod(y-ybar)
ESS <- crossprod(x %*% b_hat - ybar)
USS = TSS-ESS
R.squared <- ESS/TSS
adj.R.squared <- 1-(1-R.squared)*(n-1)/(n-k)
F.stat <- (ESS/(k-1))/(USS/(n-k))
pF <- 1-pf(F.stat,k-1,n-k)
cat("  Parameter estimates =", round(b_hat,2),fill=TRUE)
cat("  Standard errors     =", round(std.estimates,2),fill=TRUE)
cat("  t-stats             =", round(t.stat,2),fill=TRUE)
cat("  p-value             =", round(p.value,2),fill=TRUE)
cat("\n",fill=TRUE)
cat("Residual standard error:",round(sqrt(sigsq.hat),2),"on",n-k,"degrees of freedom",fill=TRUE)
cat("Multiple R-squared",round(R.squared,3),"     Adjusted R-squared",round(adj.R.squared,3),fill=TRUE)
cat("F-statistic:", round(F.stat,3), "on",k-1,"and",n-k," DF,  Pvalue:",round(pF,3),fill=TRUE)
list(b_hat = b_hat, std.estimates = std.estimates, t.stat = t.stat
,p.value = p.value, sigsq.hat = sigsq.hat, R.squared = R.squared
,adj.R.squared = adj.R.squared, F.stat = F.stat)
}
data <- DGP.2(0,0)
OLS.est(data)
DGP.2 <- function(settings,pram,seednum = NULL){ #data generating process with 2 independent variables
set.seed(20163638)
b0 <- -3
b1 <- 0.5
b2 <- 4
N <- 200
sigsq <- 4
x1 <- runif(N, -4, 2)
x2 <- rnorm(N, mean=3, sd=1)
x <- cbind(x1,x2)
error <- rnorm(N, mean=0, sd=sqrt(sigsq))
y <- b0 + b1*x1 + b2*x2 + error
output <- list(y = y, x = x) #y: dependent variable, X: independent variable(x1,x2)
return(output)
}
data <- DGP.2(0,0)
OLS.est <- function(data, include.constant=TRUE){
y <- data$y
n <- length(y)
if(include.constant = TRUE){
k <- ncol(data$x)+1
x0 <- rep(1, times=n)
x <- cbind(x0,data$x)
}
else{
k <- ncol(data$x)
x <- data$x
}
chol <- chol2inv(chol(crossprod(x)))
b_hat <-chol %*% crossprod(x,y) #b=(X'X)^-1XY
res <- y - x %*% b_hat
sigsq.hat <- crossprod(res)/(n-k) #S^2 계산
sigsq.hat <- as.numeric(sigsq.hat)
varmatrix <- sigsq_hat*chol
std.estimates <- matrix(data=NA,nrow=k,ncol=1) #sigma를 구하자
for(i in 1:k){
std.estimates[i,1]=sqrt(varmatrix[i,i])
}
t.stat <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
t.stat[i,1]=b_hat[i,1]/std.estimates[i,1]
}
p.value <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
p.value[i,1]=2*(1-pt(abs(t.stat[i,1]),df=n-k))
}
ybar <- rep(mean(y),n)         #R^2과 F-test를 위한 준비
TSS <- crossprod(y-ybar)
ESS <- crossprod(x %*% b_hat - ybar)
USS = TSS-ESS
R.squared <- ESS/TSS
adj.R.squared <- 1-(1-R.squared)*(n-1)/(n-k)
F.stat <- (ESS/(k-1))/(USS/(n-k))
pF <- 1-pf(F.stat,k-1,n-k)
cat("  Parameter estimates =", round(b_hat,2),fill=TRUE)
cat("  Standard errors     =", round(std.estimates,2),fill=TRUE)
cat("  t-stats             =", round(t.stat,2),fill=TRUE)
cat("  p-value             =", round(p.value,2),fill=TRUE)
cat("\n",fill=TRUE)
cat("Residual standard error:",round(sqrt(sigsq.hat),2),"on",n-k,"degrees of freedom",fill=TRUE)
cat("Multiple R-squared",round(R.squared,3),"     Adjusted R-squared",round(adj.R.squared,3),fill=TRUE)
cat("F-statistic:", round(F.stat,3), "on",k-1,"and",n-k," DF,  Pvalue:",round(pF,3),fill=TRUE)
list(b_hat = b_hat, std.estimates = std.estimates, t.stat = t.stat
,p.value = p.value, sigsq.hat = sigsq.hat, R.squared = R.squared
,adj.R.squared = adj.R.squared, F.stat = F.stat)
}
OLS.est <- function(data, include.constant=TRUE){
y <- data$y
n <- length(y)
if(include.constant = TRUE){
k <- ncol(data$x)+1
x0 <- rep(1, times=n)
x <- cbind(x0,data$x)
}
else{
k <- ncol(data$x)
x <- data$x
}
chol <- chol2inv(chol(crossprod(x)))
b_hat <-chol %*% crossprod(x,y) #b=(X'X)^-1XY
res <- y - x %*% b_hat
sigsq.hat <- crossprod(res)/(n-k) #S^2 계산
sigsq.hat <- as.numeric(sigsq.hat)
varmatrix <- sigsq_hat*chol
std.estimates <- matrix(data=NA,nrow=k,ncol=1) #sigma를 구하자
for(i in 1:k){
std.estimates[i,1]=sqrt(varmatrix[i,i])
}
t.stat <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
t.stat[i,1]=b_hat[i,1]/std.estimates[i,1]
}
p.value <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
p.value[i,1]=2*(1-pt(abs(t.stat[i,1]),df=n-k))
}
ybar <- rep(mean(y),n)         #R^2과 F-test를 위한 준비
TSS <- crossprod(y-ybar)
ESS <- crossprod(x %*% b_hat - ybar)
USS = TSS-ESS
R.squared <- ESS/TSS
adj.R.squared <- 1-(1-R.squared)*(n-1)/(n-k)
F.stat <- (ESS/(k-1))/(USS/(n-k))
pF <- 1-pf(F.stat,k-1,n-k)
cat("  Parameter estimates =", round(b_hat,2),fill=TRUE)
cat("  Standard errors     =", round(std.estimates,2),fill=TRUE)
cat("  t-stats             =", round(t.stat,2),fill=TRUE)
cat("  p-value             =", round(p.value,2),fill=TRUE)
cat("\n",fill=TRUE)
cat("Residual standard error:",round(sqrt(sigsq.hat),2),"on",n-k,"degrees of freedom",fill=TRUE)
cat("Multiple R-squared",round(R.squared,3),"     Adjusted R-squared",round(adj.R.squared,3),fill=TRUE)
cat("F-statistic:", round(F.stat,3), "on",k-1,"and",n-k," DF,  Pvalue:",round(pF,3),fill=TRUE)
list(b_hat = b_hat, std.estimates = std.estimates, t.stat = t.stat
,p.value = p.value, sigsq.hat = sigsq.hat, R.squared = R.squared
,adj.R.squared = adj.R.squared, F.stat = F.stat)
}
OLS.est <- function(data, include.constant=TRUE){
y <- data$y
n <- length(y)
if(include.constant == TRUE){
k <- ncol(data$x)+1
x0 <- rep(1, times=n)
x <- cbind(x0,data$x)
}
else{
k <- ncol(data$x)
x <- data$x
}
chol <- chol2inv(chol(crossprod(x)))
b_hat <-chol %*% crossprod(x,y) #b=(X'X)^-1XY
res <- y - x %*% b_hat
sigsq.hat <- crossprod(res)/(n-k) #S^2 계산
sigsq.hat <- as.numeric(sigsq.hat)
varmatrix <- sigsq_hat*chol
std.estimates <- matrix(data=NA,nrow=k,ncol=1) #sigma를 구하자
for(i in 1:k){
std.estimates[i,1]=sqrt(varmatrix[i,i])
}
t.stat <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
t.stat[i,1]=b_hat[i,1]/std.estimates[i,1]
}
p.value <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
p.value[i,1]=2*(1-pt(abs(t.stat[i,1]),df=n-k))
}
ybar <- rep(mean(y),n)         #R^2과 F-test를 위한 준비
TSS <- crossprod(y-ybar)
ESS <- crossprod(x %*% b_hat - ybar)
USS = TSS-ESS
R.squared <- ESS/TSS
adj.R.squared <- 1-(1-R.squared)*(n-1)/(n-k)
F.stat <- (ESS/(k-1))/(USS/(n-k))
pF <- 1-pf(F.stat,k-1,n-k)
cat("  Parameter estimates =", round(b_hat,2),fill=TRUE)
cat("  Standard errors     =", round(std.estimates,2),fill=TRUE)
cat("  t-stats             =", round(t.stat,2),fill=TRUE)
cat("  p-value             =", round(p.value,2),fill=TRUE)
cat("\n",fill=TRUE)
cat("Residual standard error:",round(sqrt(sigsq.hat),2),"on",n-k,"degrees of freedom",fill=TRUE)
cat("Multiple R-squared",round(R.squared,3),"     Adjusted R-squared",round(adj.R.squared,3),fill=TRUE)
cat("F-statistic:", round(F.stat,3), "on",k-1,"and",n-k," DF,  Pvalue:",round(pF,3),fill=TRUE)
list(b_hat = b_hat, std.estimates = std.estimates, t.stat = t.stat
,p.value = p.value, sigsq.hat = sigsq.hat, R.squared = R.squared
,adj.R.squared = adj.R.squared, F.stat = F.stat)
}
data <- DGP.2(0,0)
OLS.est(data)
OLS.est <- function(data, include.constant=TRUE){
y <- data$y
n <- length(y)
if(include.constant == TRUE){
k <- ncol(data$x)+1
x0 <- rep(1, times=n)
x <- cbind(x0,data$x)
}
else{
k <- ncol(data$x)
x <- data$x
}
chol <- chol2inv(chol(crossprod(x)))
b_hat <-chol %*% crossprod(x,y) #b=(X'X)^-1XY
res <- y - x %*% b_hat
sigsq.hat <- crossprod(res)/(n-k) #S^2 계산
sigsq.hat <- as.numeric(sigsq.hat)
varmatrix <- sigsq_hat*chol
std.estimates <- matrix(data=NA,nrow=k,ncol=1) #sigma를 구하자
for(i in 1:k){
std.estimates[i,1]=sqrt(varmatrix[i,i])
}
t.stat <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
t.stat[i,1]=b_hat[i,1]/std.estimates[i,1]
}
p.value <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
p.value[i,1]=2*(1-pt(abs(t.stat[i,1]),df=n-k))
}
ybar <- rep(mean(y),n)         #R^2과 F-test를 위한 준비
TSS <- crossprod(y-ybar)
ESS <- crossprod(x %*% b_hat - ybar)
USS = TSS-ESS
R.squared <- ESS/TSS
adj.R.squared <- 1-(1-R.squared)*(n-1)/(n-k)
F.stat <- (ESS/(k-1))/(USS/(n-k))
pF <- 1-pf(F.stat,k-1,n-k)
cat("  Parameter estimates =", round(b_hat,2),fill=TRUE)
cat("  Standard errors     =", round(std.estimates,2),fill=TRUE)
cat("  t-stats             =", round(t.stat,2),fill=TRUE)
cat("  p-value             =", round(p.value,2),fill=TRUE)
cat("\n",fill=TRUE)
cat("Residual standard error:",round(sqrt(sigsq.hat),2),"on",n-k,"degrees of freedom",fill=TRUE)
cat("Multiple R-squared",round(R.squared,3),"     Adjusted R-squared",round(adj.R.squared,3),fill=TRUE)
cat("F-statistic:", round(F.stat,3), "on",k-1,"and",n-k," DF,  Pvalue:",round(pF,3),fill=TRUE)
list(b_hat = b_hat, std.estimates = std.estimates, t.stat = t.stat
,p.value = p.value, sigsq.hat = sigsq.hat, R.squared = R.squared
,adj.R.squared = adj.R.squared, F.stat = F.stat)
}
data <- DGP.2(0,0)
OLS.est(data
OLS.est(data)
OLS.est(data)
OLS.est <- function(data, include.constant=TRUE){
y <- data$y
n <- length(y)
if(include.constant == TRUE){
k <- ncol(data$x)+1
x0 <- rep(1, times=n)
x <- cbind(x0,data$x)
}
else{
k <- ncol(data$x)
x <- data$x
}
chol <- chol2inv(chol(crossprod(x)))
b_hat <-chol %*% crossprod(x,y) #b=(X'X)^-1XY
res <- y - x %*% b_hat
sigsq.hat <- crossprod(res)/(n-k) #S^2 계산
sigsq.hat <- as.numeric(sigsq.hat)
varmatrix <- sigsq.hat*chol
std.estimates <- matrix(data=NA,nrow=k,ncol=1) #sigma를 구하자
for(i in 1:k){
std.estimates[i,1]=sqrt(varmatrix[i,i])
}
t.stat <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
t.stat[i,1]=b_hat[i,1]/std.estimates[i,1]
}
p.value <- matrix(data=NA,nrow=k,ncol=1) #t.stat을 구하자
for(i in 1:k){
p.value[i,1]=2*(1-pt(abs(t.stat[i,1]),df=n-k))
}
ybar <- rep(mean(y),n)         #R^2과 F-test를 위한 준비
TSS <- crossprod(y-ybar)
ESS <- crossprod(x %*% b_hat - ybar)
USS = TSS-ESS
R.squared <- ESS/TSS
adj.R.squared <- 1-(1-R.squared)*(n-1)/(n-k)
F.stat <- (ESS/(k-1))/(USS/(n-k))
pF <- 1-pf(F.stat,k-1,n-k)
cat("  Parameter estimates =", round(b_hat,2),fill=TRUE)
cat("  Standard errors     =", round(std.estimates,2),fill=TRUE)
cat("  t-stats             =", round(t.stat,2),fill=TRUE)
cat("  p-value             =", round(p.value,2),fill=TRUE)
cat("\n",fill=TRUE)
cat("Residual standard error:",round(sqrt(sigsq.hat),2),"on",n-k,"degrees of freedom",fill=TRUE)
cat("Multiple R-squared",round(R.squared,3),"     Adjusted R-squared",round(adj.R.squared,3),fill=TRUE)
cat("F-statistic:", round(F.stat,3), "on",k-1,"and",n-k," DF,  Pvalue:",round(pF,3),fill=TRUE)
list(b_hat = b_hat, std.estimates = std.estimates, t.stat = t.stat
,p.value = p.value, sigsq.hat = sigsq.hat, R.squared = R.squared
,adj.R.squared = adj.R.squared, F.stat = F.stat)
}
data <- DGP.2(0,0)
OLS.est(data)
out <-lm(data$y~data$x[,1]+data$x[,2])
summary(out)
var(data$x)
out <-lm(data$y~data$x[,1]+data$x[,2])
summary(out)
help("lm")
?lm
?formula
out <-lm(data$y~0+data$x[,1]+data$x[,2])
summary(out)
out <-lm(data$y~data$x[,1]+data$x[,2])
summary(out)
data <- read.csv("C:/Users/dwchoi/Desktop/Part1.csv",header=)
data
cor(data)
data
cor(data)
data[,1] <- null
data
cor(data)
data[,1] == null
rm(list=ls())
data <- read.csv("C:/Users/dwchoi/Desktop/Part1.csv",header=)
attach(data)
data
cor(data)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP+PROMOTION)
summary(out)
cor(data)
out<-lm(REVENUE~COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+POP+PROMOTION)
summary(out)
cor(data)
out<-lm(REVENUE~AREA+COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(REVENUE~COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+POP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(0+REVENUE~AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE)
summary(out)
21.109*300-481.158*4+551.671*8
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE+POP)
summary(out)
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE)
summary(out)
out<-lm(REVENUE~COMP+PROMOTION)
summary(out)
out<-lm(REVENUE~0+AREA+COMP+EMPLOYEE)
summary(out)
data <- read.csv("E:/prod.csv",header=)
data <- read.csv("E:/prod.csv",header=)
View(data)
data <- read.csv("E:/prod.csv",header=False)
data <- read.csv("E:/prod.csv",header=F)
View(data)
data <- read.csv("E:/purchase.csv",header=F)
data <- read.csv("E:/purchase.csv",header=F)
data <- read.csv("E:/customer.csv",header=F)
install.packages("swirl")
library(swirl)
swril()
swirl()
data <- read.csv("J:데이터\\thompson_clean_after1990")
data <- read.csv("J:\\데이터\\thompson_clean_after1990")
data <- read.csv("J:\\데이터\\thompson_clean_after1990.csv")
data <- read.csv("J:\\데이터\\thompson_clean_after1990.csv")
View(data)
fb <- sqldf("select * from data where Company.name contain 'facebook'")
library(sqldf)
fb <- sqldf("select * from data where Company.name contain 'facebook'")
names(data)
str(data[152])
fb <- sqldf("select * from data where Company.Name contain 'facebook'")
fb <- sqldf("select * from data where Company.Name contains 'facebook'")
fb <- sqldf("select * from data where contains(Company.Name, 'facebook'")
fb <- sqldf("select * from data where contains(Company.Name, 'facebook'"))
fb <- sqldf("select * from data where contains(Company.Name, 'facebook')")
fb <- sqldf("select * from data where contains(data[30],'facebook')")
source('C:/Users/DW/Dropbox/공부할거/코딩/mycode/r/thomson/d.R', echo=TRUE)
fb <- sqldf("select * from data where contains(Company.Name,'facebook')")
fb <- sqldf("select * from data where contains(Company.Name ,'facebook')")
names <- sqldf("select * from ALL_COL_COMMENTS where TABLE_NAME = 'data'")
names <- sqldf("select * from data.COLUMNS")
names <- sqldf("select * from information_schema.COLUMNS")
fb <- sqldf("select Company.Name from data)
fb <- sqldf("select Company.Name from data)
fb <- sqldf("select Company.Name from data")
fb <- sqldf("select * from data limit 1")
View(fb)
View(data)
View(fb)
View(data)
View(fb)
f<- sqldf("select column_name from information_schema.columns where table_name='data'")
colnames(data) <- gsub("\\.","_",colnames(data))
fb <- sqldf("select * from data limit 1")
View(fb)
fb <- sqldf("select * from data where contains(Company_Name, 'facebook')")
fb <- sqldf("select * from data where Company_Name like 'facebook')
fb <- sqldf("select * from data where Company_Name like 'facebook')
fb <- sqldf("select * from data where Company_Name like 'facebook'")
View(fb)
fb <- sqldf("select * from data where Company_Name like 'facebook%'")
View(fb)
names(data)
data <- subset(data, select = -Fund_Fax_Number)
colnames(data) <- gsub("__","_",colnames(data))
View(data)
colnames(data) <- gsub("%_","_",colnames(data))
colnames(data) <- gsub("%%_",".",colnames(data))
colnames(data) <- gsub("\\_",".",colnames(data))
colnames(data) <- gsub("\\.","",colnames(data))
data <- read.csv("J:\\데이터\\thompson_clean_after1990.csv")
data <- subset(data, select = -Fund_Fax_Number)
data <- subset(data, select = -Fund.Fax.Number)
colnames(data) <- gsub("\\.","_",colnames(data))
write.csv(clean2, "J:\\데이터\\thompson_clean2.csv")
write.csv(data, "J:\\데이터\\thompson_clean2.csv")
data <- read.csv("J:\\데이터\\thompson_clean2.csv")
View(data)
data <- subset(data, select = -Fund_Fax_Number)
data <- subset(data, select = -Fund_Fax_Number_)
names(data)
a<-colnames(data)
a<-colnames(data)
a
help('gsub')
a <- gsub("__", "_", fixed=TRUE)
a <- gsub("__","_",a,fixed=TRUE)
a
a <- sub("__", "_", a, fixed=TRUE)
a
a <- gsub("\\_$", "", a)
a
a<-colnames(data)
a <- sub("__", "_", a, fixed=TRUE)
a
a <- gsub("_$", "", a, fixed=TRUE)
a
a <- gsub("\\_$", "", a, fixed=TRUE)
a
a <- gsub("\\_$", "", a)
a
colnames(data) <- gsub("\\.","_",colnames(data)) #colname의 .을 _로 변경
colnames(data)("__", "_", a, fixed=TRUE)        #__를 _로 변경
colnames(data)("\\_$", "", a)
colnames(data)("__", "_", colnames(data), fixed=TRUE)        #__를 _로 변경
colnames(data)("\\_$", "", colnames(data))
colnames(data)("__", "_", colnames(data), fixed=TRUE)
colnames(data) <- sub("__", "_", colnames(data), fixed=TRUE)        #__를 _로 변경
colnames(data) <- gsub("\\_$", "", colnames(data))
View(data)
names(data)
write.csv(data, "J:\\데이터\\thompson_clean2.csv")
library(dplyr)
library(sqldf)
data <- read.csv("J:\\데이터\\thompson_clean_after1990.csv")
fb <- sqldf("select * from data where Company_Name like 'facebook%'")
names(data)
View(data)
data <- read.csv("J:\\데이터\\thompson_clean2.csv")
names(data)
fb <- sqldf("select * from data where Company_Name like 'facebook%'")
View(fb)
write.csv(data, "J:\\데이터\\facebook.csv")
library(dplyr)
library(sqldf)
data <- read.csv("J:\\데이터\\thompson_clean2.csv")
fb <- sqldf("select * from data where Company_Name like 'facebook%'")
write.csv(fb, "J:\\데이터\\facebook.csv")
